/** \page afs_search_coder AFS search query coder/decoder API
 *
 * \tableofcontents
 *
 * \section asc_introduction Introduction
 *
 * This API simplifies coding/decoding query so that query parameters can be
 * serialized in URL and unserialized from URL. Main objective is to keep URL as
 * readable as possible.
 *
 * Snippets of code are usable as is and can be joined to build a fully
 * functional example step by step. If you prefer you can get access to full
 * code example \ref Application.java.
 *
 *
 * \section asc_coder_mgr Coder manager
 *
 * Instance of this class (@a search::CoderManager) manages <tt>feed</tt> and
 * <tt>filter</tt> coders. Default <tt>feed</tt> and <tt>filter</tt> coders are
 * instanciated unless specific ones are defined.
 *
 *
 * \section asc_coder Antidot query coder/decoder
 *
 * Basically, instance of this class (@a search::QueryEncoder) allows to:
 * - build @a search::Query object from URL parameters,
 * - generate appropriate links for facet filtering and other options.
 *
 * Here is an example of building a query:
 * @snippet Application.java Coder/decoder and Query
 *
 *
 * \section asc_query Query
 *
 * From @c coder declared in previous section, new links can be generated.
 * Curent query should be modified with appropriate filters and then links can
 * be generated as shown bellow (this example is not part of the
 * @ref Application.java):
 * @code
   Query newQuery = query.addFilter('FOO', 'bar');
   String link = coder.generaterLink(newQuery);
   @endcode
 * With empty initial @c query and standard @c coder, generated link should
 * correspond to:
 * @verbatim http://FQDN/?replies=10&filter=FOO_bar @endverbatim
 *
 *
 * \section asc_end Next step
 *
 * @ref afs_search_query
 */
